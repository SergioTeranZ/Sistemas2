(dp1
S'output'
p2
S'<type \'exceptions.RuntimeError\'> Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/base.py", line 446, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 60, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 155, in __init__\n    self.reconnect()\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/connection.py", line 125, in reconnect\n    self.connection = f()\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 152, in connector\n    return self.driver.connect(**driver_args)\n  File "/home/www-data/web2py/gluon/contrib/pg8000/__init__.py", line 336, in connect\n    user, host, unix_sock, port, database, password, ssl)\n  File "/home/www-data/web2py/gluon/contrib/pg8000/core.py", line 1282, in __init__\n    raise self.error\nProgrammingError: (\'FATAL\', \'28P01\', \'password authentication failed for user "Siradex"\')\n'
p3
sS'layer'
p4
S'/home/www-data/web2py/applications/Sistemas2/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n# -------------------------------------------------------------------------\n# This scaffolding model makes your app work on Google App Engine too\n# File is released under public domain and you can use without limitations\n# -------------------------------------------------------------------------\n\nif request.global_settings.web2py_version < "2.14.1":\n    raise HTTP(500, "Requires web2py 2.13.3 or newer")\n\n# -------------------------------------------------------------------------\n# if SSL/HTTPS is properly configured and you want all HTTP requests to\n# be redirected to HTTPS, uncomment the line below:\n# -------------------------------------------------------------------------\n# request.requires_https()\n\n# -------------------------------------------------------------------------\n# app configuration made easy. Look inside private/appconfig.ini\n# -------------------------------------------------------------------------\nfrom gluon.contrib.appconfig import AppConfig\n\n# -------------------------------------------------------------------------\n# once in production, remove reload=True to gain full speed\n# -------------------------------------------------------------------------\nmyconf = AppConfig(reload=True)\n\nif not request.env.web2py_runtime_gae:\n    # ---------------------------------------------------------------------\n    # if NOT running on Google App Engine use SQLite or other DB\n    # ---------------------------------------------------------------------\n    db = DAL(\'postgres://Siradex:Siradex@localhost/Siradex\', pool_size = 10, migrate_enabled=True)\nelse:\n    # ---------------------------------------------------------------------\n    # connect to Google BigTable (optional \'google:datastore://namespace\')\n    # ---------------------------------------------------------------------\n    db = DAL(\'google:datastore+ndb\')\n    # ---------------------------------------------------------------------\n    # store sessions and tickets there\n    # ---------------------------------------------------------------------\n    session.connect(request, response, db=db)\n    # ---------------------------------------------------------------------\n    # or store session in Memcache, Redis, etc.\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\n    # ---------------------------------------------------------------------\n\n# -------------------------------------------------------------------------\n# by default give a view/generic.extension to all actions from localhost\n# none otherwise. a pattern can be \'controller/function.extension\'\n# -------------------------------------------------------------------------\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n# -------------------------------------------------------------------------\n# choose a style for forms\n# -------------------------------------------------------------------------\nresponse.formstyle = myconf.get(\'forms.formstyle\')  # or \'bootstrap3_stacked\' or \'bootstrap2\' or other\nresponse.form_label_separator = myconf.get(\'forms.separator\') or \'\'\n\n# -------------------------------------------------------------------------\n# (optional) optimize handling of static files\n# -------------------------------------------------------------------------\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n\n# -------------------------------------------------------------------------\n# (optional) static assets folder versioning\n# -------------------------------------------------------------------------\n# response.static_version = \'0.0.0\'\n\n# -------------------------------------------------------------------------\n# Here is sample code if you need for\n# - email capabilities\n# - authentication (registration, login, logout, ... )\n# - authorization (role based authorization)\n# - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n# - old style crud actions\n# (more options discussed in gluon/tools.py)\n# -------------------------------------------------------------------------\n\nfrom gluon.tools import Auth, Service, PluginManager\n\n# host names must be a list of allowed host names (glob syntax allowed)\nauth = Auth(db, host_names=myconf.get(\'host.names\'))\nservice = Service()\nplugins = PluginManager()\n\n# -------------------------------------------------------------------------\n# create all tables needed by auth if not custom tables\n# -------------------------------------------------------------------------\nauth.define_tables(username=False, signature=False)\n\n# -------------------------------------------------------------------------\n# configure email\n# -------------------------------------------------------------------------\nmail = auth.settings.mailer\nmail.settings.server = \'logging\' if request.is_local else myconf.get(\'smtp.server\')\nmail.settings.sender = myconf.get(\'smtp.sender\')\nmail.settings.login = myconf.get(\'smtp.login\')\nmail.settings.tls = myconf.get(\'smtp.tls\') or False\nmail.settings.ssl = myconf.get(\'smtp.ssl\') or False\n\n# -------------------------------------------------------------------------\n# configure auth policy\n# -------------------------------------------------------------------------\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n# -------------------------------------------------------------------------\n# Define your tables below (or better in another model file) for example\n#\n# >>> db.define_table(\'mytable\', Field(\'myfield\', \'string\'))\n#\n# Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n#       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n# There is an implicit \'id integer autoincrement\' field\n# Consult manual for more options, validators, etc.\n#\n# More API examples for controllers:\n#\n# >>> db.mytable.insert(myfield=\'value\')\n# >>> rows = db(db.mytable.myfield == \'value\').select(db.mytable.ALL)\n# >>> for row in rows: print row.id, row.myfield\n# -------------------------------------------------------------------------\n\n# -------------------------------------------------------------------------\n# after defining tables, uncomment below to enable auditing\n# -------------------------------------------------------------------------\n# auth.enable_record_versioning(db)\n#raise HTTP(404)\n\ntipo_campos = [\'fecha\', \'participante\', \'ci\', \'comunidad\', \'telefono\', \'texto\',\'documento\', \'imagen\', \'cantidad entera\', \'cantidad decimal\']\n\n#db.usuario.drop()\ndb.define_table(\'USUARIO\',\n    Field(\'ci\',type=\'string\',length=8, notnull=True,required=True, unique=True),\n    Field(\'usbid\', type=\'string\', unique=True,notnull=True),\n    Field(\'nombres\',type=\'string\',length=50,required=True),\n    Field(\'apellidos\',type=\'string\',length=50,required=True),\n    Field(\'telefono\',type=\'string\',length=15),\n    Field(\'correo_inst\', type=\'string\',notnull=True),\n    Field(\'correo_alter\', type=\'string\'),\n    Field(\'tipo\',type=\'string\',length=15,requires=IS_IN_SET([\'Usuario\', \'DEX\', \'Administrador\',\'Bloqueado\'])),\n    primarykey=[\'ci\'],\n    migrate=True,\n    # redefine=True,\n    # migrate=\'usuario.table\',\n);\n\ndb.define_table(\'USBID\',\n    Field(\'ci_usuario\',db.USUARIO.ci),\n    Field(\'usbid\',type=\'string\',length=20, notnull=True, unique=True),\n    primarykey=[\'ci_usuario\'],\n    migrate=True\n);\n\ndb.define_table(\'JEFE_DEPENDENCIA\',\n    Field(\'id_jefe\', type=\'string\'),\n    Field(\'ci_usuario\',db.USUARIO.ci),\n    primarykey=[\'id_jefe\'],\n    migrate=True\n);\n\ndb.define_table(\'TIPO_ACTIVIDAD\',\n    Field(\'id_tipo\', type=\'string\'),\n    Field(\'nombre\',type=\'string\',length=128, notnull=True,unique=True,\n        requires=[IS_LENGTH(128,error_message=\'Tama\xc3\xb1o m\xc3\xa1ximo de 128 caracteres\')]),\n    Field(\'tipo_p_r\',type=\'string\', length=1, notnull=True, requires=IS_IN_SET(["P", "R"]), default="P"),\n    Field(\'descripcion\',type=\'string\',length=2048, notnull=True,\n        requires=[IS_LENGTH(2048,error_message=\'Tama\xc3\xb1o m\xc3\xa1ximo de 2048 caracteres\')]),\n    Field(\'programa\',type=\'string\', length=128, notnull=True,\n        requires=[IS_LENGTH(128, error_message=\'Tama\xc3\xb1o m\xc3\xa1ximo de 128 caracteres\')]),\n    Field(\'validacion\',type=\'string\', length=128, notnull=True,default=\'True\'),\n    Field(\'producto\', type=\'string\', length=256,\n        requires=[IS_NOT_EMPTY(error_message=\'No puede ser vac\xc3\xada\'),\n        IS_LENGTH(256,error_message=\'El nombre no pude ser m\xc3\xa1s de 256 caracteres\')]),\n    Field(\'nro_campos\', type=\'integer\', requires=IS_NOT_EMPTY(error_message=\'No puede ser vac\xc3\xada\')),\n    Field(\'id_jefe_creador\',db.JEFE_DEPENDENCIA.id_jefe),\n    Field(\'ci_usuario_propone\',db.USUARIO.ci),\n    Field(\'papelera\', type=\'boolean\', notnull = True, default=False),\n    primarykey=[\'id_tipo\'],\n    migrate=True\n);\n\ndb.define_table(\'ACTIVIDAD\',\n    Field(\'id_actividad\',  type=\'string\'),\n    Field(\'id_tipo\', db.TIPO_ACTIVIDAD.id_tipo),\n    Field(\'validacion\',type=\'string\',default=\'En espera\'),\n    Field(\'estado\',type=\'string\'),\n    Field(\'evaluacion_criterio\',type=\'string\',length=256),\n    Field(\'evaluacion_valor\',type=\'string\', length=256),\n    Field(\'ci_usuario_modifica\', db.USUARIO.ci),\n    Field(\'ci_usuario_elimina\', db.USUARIO.ci),\n    Field(\'ci_usuario_crea\', db.USUARIO.ci),\n    primarykey=[\'id_actividad\'],\n    migrate=True\n);\n\ndb.define_table(\'PERMISOS_TIPO_ACT\',\n    Field(\'permiso\',type=\'string\',length=256),\n    Field(\'id_tipo\', db.TIPO_ACTIVIDAD.id_tipo),\n    primarykey=[\'permiso\',\'id_tipo\'],\n    migrate=True\n\n);\n\ndb.define_table(\'CATALOGO\',\n    Field(\'id_catalogo\', type=\'string\'),\n    Field(\'nro_campos\',type=\'integer\'),\n    Field(\'nombre\',type=\'string\',length=128, unique = True),\n    primarykey=[\'id_catalogo\'],\n    migrate=True\n);\n\n\ndb.define_table(\'CAMPO\',\n    Field(\'id_campo\', type=\'string\'),\n    Field(\'obligatorio\', type=\'boolean\'),\n    Field(\'nombre\',type=\'string\', length=64,\n        requires = [IS_NOT_IN_DB(db, \'CAMPO.nombre\',error_message=\'\')]),\n    Field(\'lista\', type=\'string\', length=64,\n        requires = [IS_IN_SET(tipo_campos)],\n        widget = SQLFORM.widgets.options.widget),\n    Field(\'despliega_cat\',db.CATALOGO.id_catalogo),\n    primarykey=[\'id_campo\'],\n    migrate=True\n);\n\n\ndb.define_table(\'CAMPO_CATALOGO\',\n    Field(\'id_campo_cat\',  type=\'string\'),\n    Field(\'tipo_cat\',type=\'string\', length=256,\n          requires = [IS_IN_SET(tipo_campos)],\n        widget = SQLFORM.widgets.options.widget),\n    Field(\'nombre\', type=\'string\', length=64),\n    Field(\'eliminar\', type=\'boolean\'),\n    primarykey=[\'id_campo_cat\'],\n    migrate=True\n);\n\n\ndb.define_table(\'LOG_SIRADEX\',\n    Field(\'accion\',type=\'string\'),\n    Field(\'accion_fecha\',type=\'datetime\'),\n    Field(\'accion_ip\',type=\'string\'),\n    Field(\'descripcion\',type=\'string\'),\n    Field(\'ci_usuario\',db.USUARIO.ci),\n    primarykey=[\'accion\',\'accion_fecha\',\'accion_ip\'],\n    migrate=True\n);\n\n\ndb.define_table(\'PARTICIPA_ACT\',\n    Field(\'ci_usuario\',db.USUARIO.ci),\n    Field(\'id_actividad\',db.ACTIVIDAD.id_actividad),\n    primarykey=[\'ci_usuario\',\'id_actividad\'],\n    migrate=True\n);\n\ndb.define_table(\'TIENE_CAMPO\',\n    Field(\'id_actividad\',db.ACTIVIDAD.id_actividad),\n    Field(\'id_campo\', db.CAMPO.id_campo),\n    Field(\'valor_campo\', type=\'string\', length=256),\n    primarykey=[\'id_actividad\', \'id_campo\'],\n    migrate=True\n);\n\ndb.define_table(\'ACT_POSEE_CAMPO\',\n    Field(\'id_tipo_act\', db.TIPO_ACTIVIDAD.id_tipo),\n    Field(\'id_campo\', db.CAMPO.id_campo),\n    primarykey=[\'id_tipo_act\', \'id_campo\'],\n    migrate=True\n);\n\ndb.define_table(\'GESTIONA_TIPO_ACT\',\n    Field(\'id_jefe\', db.JEFE_DEPENDENCIA.id_jefe),\n    Field(\'id_tipo_act\', db.TIPO_ACTIVIDAD.id_tipo),\n    primarykey=[\'id_jefe\',\'id_tipo_act\'],\n    migrate=True\n);\n\n\ndb.define_table(\'GESTIONA_CATALOGO\',\n    Field(\'id_jefe\', db.JEFE_DEPENDENCIA.id_jefe),\n    Field(\'id_catalogo\',db.CATALOGO.id_catalogo),\n    primarykey=[\'id_jefe\',\'id_catalogo\'],\n    migrate=True\n);\n\ndb.define_table(\'CATALOGO_TIENE_CAMPO\',\n    Field(\'id_catalogo\',db.CATALOGO.id_catalogo),\n    Field(\'id_campo_cat\',db.CAMPO_CATALOGO.id_campo_cat),\n    primarykey=[\'id_catalogo\',\'id_campo_cat\'],\n    migrate=True\n);\n\ndb.define_table(\'VALORES_CAMPO_CATALOGO\',\n    Field(\'id_catalogo\',db.CATALOGO.id_catalogo),\n    Field(\'id_campo_cat\',db.CAMPO_CATALOGO.id_campo_cat),\n    Field(\'valor\',type=\'string\', length=256, notnull = True),\n    primarykey=[\'id_catalogo\',\'id_campo_cat\',\'valor\'],\n    migrate=True\n);\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/www-data/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/www-data/web2py/applications/Sistemas2/models/db.py", line 31, in <module>\n    db = DAL(\'postgres://Siradex:Siradex@localhost/Siradex\', pool_size = 10, migrate_enabled=True)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/base.py", line 174, in __call__\n    obj = super(MetaDAL, cls).__call__(*args, **kwargs)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/base.py", line 473, in __init__\n    "Failure to connect, tried %d times:\\n%s" % (attempts, tb)\nRuntimeError: Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/base.py", line 446, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 60, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 155, in __init__\n    self.reconnect()\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/connection.py", line 125, in reconnect\n    self.connection = f()\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 152, in connector\n    return self.driver.connect(**driver_args)\n  File "/home/www-data/web2py/gluon/contrib/pg8000/__init__.py", line 336, in connect\n    user, host, unix_sock, port, database, password, ssl)\n  File "/home/www-data/web2py/gluon/contrib/pg8000/core.py", line 1282, in __init__\n    raise self.error\nProgrammingError: (\'FATAL\', \'28P01\', \'password authentication failed for user "Siradex"\')\n\n'
p11
s.