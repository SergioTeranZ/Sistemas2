(dp1
S'output'
p2
S"<class 'gluon.contrib.pg8000.ProgrammingError'> ('ERROR', '23503', 'inserci\\xc3\\xb3n o actualizaci\\xc3\\xb3n en la tabla \\xc2\\xabactividad\\xc2\\xbb viola la llave for\\xc3\\xa1nea \\xc2\\xabfk_actividad_ci_usuario_crea\\xc2\\xbb')"
p3
sS'layer'
p4
S'/home/edward/web2py/applications/SiraDex/controllers/actividad.py'
p5
sS'code'
p6
S'# coding: utf8\n# try something like\n\nfrom pprint import pprint\nfrom datetime import time\n\ndef gestionar():\n    if session.usuario != None:\n        if(session.usuario["tipo"] == "DEX"):\n            admin = 2\n        elif(session.usuario["tipo"] == "Administrador"):\n            admin = 1\n        else:\n            admin = 0\n    else:\n        redirect(URL(c ="default",f="index"))\n\n    rows = db(db.ACTIVIDAD.ci_usuario_crea==session.usuario[\'cedula\']).select()\n    detalles = {}\n\n    for row in rows:\n        dict_campos = dict()\n        campos = db((db.TIENE_CAMPO.id_campo == db.CAMPO.id_campo)\n                    & (db.TIENE_CAMPO.id_actividad == row.id_actividad)).select()\n\n        for campo in campos:\n            dict_campos[campo.CAMPO.nombre] = campo.TIENE_CAMPO.valor_campo\n\n        detalles[row] = dict_campos\n\n    return locals()\n\ndef tipos():\n    if session.usuario != None:\n        if(session.usuario["tipo"] == "DEX"):\n            admin = 2\n        elif(session.usuario["tipo"] == "Administrador"):\n            admin = 1\n        else:\n            admin = 0\n    else:\n        redirect(URL(c ="default",f="index"))\n\n    rows = db(db.TIPO_ACTIVIDAD.papelera==\'False\').select()\n    return locals()\n\n\ndef agregar():\n    if session.usuario != None:\n    \tif(session.usuario["tipo"] == "DEX"):\n            admin = 2\n        elif(session.usuario["tipo"] == "Administrador"):\n            admin = 1\n\telse:\n\t\tadmin = 0\n    else:\n        redirect(URL(c ="default",f="index"))\n\n    tipo = int(request.args(0))\n    rows = db(db.ACT_POSEE_CAMPO.id_tipo_act == tipo).select()\n    nombre_tipo = db(db.TIPO_ACTIVIDAD.id_tipo == tipo).select().first().nombre\n    fields = []\n    for row in rows:\n        rows_campo = db(db.CAMPO.id_campo == row.id_campo).select().first()\n        nombre = rows_campo.nombre\n        nombre = nombre.replace(" ", "_")\n        obligatorio = rows_campo.obligatorio\n        tipo_campo = \'\'\n        tipo_campo = rows_campo.lista\n# tipo_campos = [\'fecha\', \'participante\', \'ci\', \'comunidad\', \'telefono\', \'texto\',\'documento\', \'cantidad entera\', \'cantidad decimal\']\n        if obligatorio:\n            if tipo_campo in   [\'fecha\']:             fields.append(Field(nombre,\'date\',requires=[IS_NOT_EMPTY(),IS_DATE(format=T(\'%Y-%m-%d\'),error_message=\'Fecha invalida, debe ser: AAA-MM-DD\')]))\n            elif tipo_campo in [\'participante,texto\']:fields.append(Field(nombre,\'string\',requires=[IS_NOT_EMPTY(error_message=\'Inserte texto\')]))\n            elif tipo_campo in [\'ci\']:                fields.append(Field(nombre,\'string\',requires=[IS_NOT_EMPTY(),IS_MATCH(\'\\d{2}.\\d{3}.\\d{3}$\', error_message=\'CI invalida, debe ser: XX.XXX.XXX\')]))\n            elif tipo_campo in [\'comunidad\']:         fields.append(Field(nombre,\'string\',requires=[IS_NOT_EMPTY()]))\n            elif tipo_campo in [\'documento\']:         fields.append(Field(nombre,\'upload\',uploadfolder=URL(\'static/archivos\'),requires=[IS_NOT_EMPTY(error_message=\'Debe subirse un archivo\')]))\n            elif tipo_campo in [\'telefono\']:          fields.append(Field(nombre,\'string\',requires=[IS_NOT_EMPTY(),IS_MATCH(\'\\(0\\d{3}\\)\\d{3}-\\d{2}-\\d{2}$\', error_message=\'Telefeno invalido, debe ser: (0xxx)xxx-xx-xx\')]))\n            elif tipo_campo in [\'cantidad entera\']:   fields.append(Field(nombre,\'string\',requires=[IS_NOT_EMPTY(),IS_INT_IN_RANGE(-9223372036854775800, 9223372036854775807)]))\n            elif tipo_campo in [\'cantidad decimal\']:  fields.append(Field(nombre,\'string\',requires=[IS_NOT_EMPTY(),IS_DECIMAL_IN_RANGE(-9223372036854775800, 9223372036854775807, dot=".",error_message=\'El numero debe ser de la forma X.X, donde X esta entre -9223372036854775800 y 9223372036854775807\')]))\n        else:\n            if tipo_campo in   [\'fecha\']:             fields.append(Field(nombre,\'date\',requires=IS_EMPTY_OR(IS_DATE(format=T(\'%Y-%m-%d\'),error_message=\'Fecha invalida, debe ser: AAA-MM-DD\'))))\n            elif tipo_campo in [\'participante,texto\']:fields.append(Field(nombre,\'string\'))\n            elif tipo_campo in [\'ci\']:                fields.append(Field(nombre,\'string\',requires=IS_EMPTY_OR(IS_MATCH(\'\\d{2}.\\d{3}.\\d{3}$\',error_message=\'CI invalida, debe ser: XX.XXX.XXX\'))))\n            elif tipo_campo in [\'comunidad\']:         fields.append(Field(nombre,\'string\'))\n            elif tipo_campo in [\'documento\']:         fields.append(Field(nombre,\'upload\',requires=IS_EMPTY_OR(IS_UPLOAD_FILENAME()),uploadfolder=URL(\'static/archivos\')))\n            elif tipo_campo in [\'telefono\']:          fields.append(Field(nombre,\'string\',requires=IS_EMPTY_OR(IS_MATCH(\'\\(0\\d{3}\\)\\d{3}-\\d{2}-\\d{2}$\', error_message=\'Telefeno invalido, debe ser: (0xxx)xxx-xx-xx\'))))\n            elif tipo_campo in [\'cantidad entera\']:   fields.append(Field(nombre,\'string\',requires=IS_EMPTY_OR(IS_INT_IN_RANGE(-9000000000000000000, 9000000000000000000,error_message=\'Numero muy grande o muy pequeno\'))))\n            elif tipo_campo in [\'cantidad decimal\']:  fields.append(Field(nombre,\'string\',requires=IS_EMPTY_OR(IS_DECIMAL_IN_RANGE(-9000000000000000000, 9000000000000000000, dot=".",error_message=\'El numero debe ser de la forma X.X, donde X esta entre -+9000000000000000000\'))))\n\n    #fields.append(Field(nombre,requires=IS_IN_SET([(1,\'Method1\'), (2,\'Method2\'), (3,\'Method3\')], zero=\'Select\')))\n\n    form=SQLFORM.factory(*fields)\n\n    if form.process().accepted:\n        dicc_act = db.ACTIVIDAD.insert(id_tipo = tipo,ci_usuario_crea= session.usuario[\'cedula\'])\n        id_act = dicc_act[\'id_actividad\']\n        for var in form.vars:\n            campo = var.replace("_"," ")\n            id_cam = db(db.CAMPO.nombre==campo).select().first().id_campo\n            valor = getattr(form.vars ,var)\n            db.TIENE_CAMPO.insert(id_actividad=id_act,id_campo=id_cam,valor_campo= valor)\n        redirect(URL(\'gestionar\'))\n    elif form.errors:\n        response.flash = \'el formulario tiene errores\'\n\n    return locals()\n\ndef modificar():\n    if session.usuario != None:\n        if(session.usuario["tipo"] == "DEX"):\n            admin = 2\n        elif(session.usuario["tipo"] == "Administrador"):\n            admin = 1\n        else:\n            admin = 0\n    else:\n        redirect(URL(c ="default",f="index"))\n\n    id_act = int(request.args(0))\n    rows = db(db.TIENE_CAMPO.id_actividad == id_act).select()\n    fields = []\n    valores = []\n    for row in rows:\n        rows_campo = db(db.CAMPO.id_campo == row.id_campo).select().first()\n        nombre = rows_campo.nombre\n        nombre = nombre.replace(" ", "_")\n        obligatorio = rows_campo.obligatorio\n        tipo_campo = \'\'\n        tipo_campo = rows_campo.lista\n# tipo_campos = [\'fecha\', \'participante\', \'ci\', \'comunidad\', \'telefono\', \'texto\',\'documento\', \'cantidad entera\', \'cantidad decimal\']\n        if obligatorio:\n            if tipo_campo in   [\'fecha\']:             fields.append(Field(nombre,\'date\',requires=[IS_NOT_EMPTY(),IS_DATE(format=T(\'%Y-%m-%d\'),error_message=\'Fecha invalida, debe ser: AAA-MM-DD\')]))\n            elif tipo_campo in [\'participante,texto\']:fields.append(Field(nombre,\'string\',requires=[IS_NOT_EMPTY(error_message=\'Inserte texto\')]))\n            elif tipo_campo in [\'ci\']:                fields.append(Field(nombre,\'string\',requires=[IS_NOT_EMPTY(),IS_MATCH(\'\\d{2}.\\d{3}.\\d{3}$\', error_message=\'CI invalida, debe ser: XX.XXX.XXX\')]))\n            elif tipo_campo in [\'comunidad\']:         fields.append(Field(nombre,\'string\',requires=[IS_NOT_EMPTY()]))\n            elif tipo_campo in [\'documento\']:         fields.append(Field(nombre,\'upload\',uploadfolder=URL(\'static/archivos\'),requires=[IS_NOT_EMPTY(error_message=\'Debe subirse un archivo\')]))\n            elif tipo_campo in [\'telefono\']:          fields.append(Field(nombre,\'string\',requires=[IS_NOT_EMPTY(),IS_MATCH(\'\\(0\\d{3}\\)\\d{3}-\\d{2}-\\d{2}$\', error_message=\'Telefeno invalido, debe ser: (0xxx)xxx-xx-xx\')]))\n            elif tipo_campo in [\'cantidad entera\']:   fields.append(Field(nombre,\'string\',requires=[IS_NOT_EMPTY(),IS_INT_IN_RANGE(-9223372036854775800, 9223372036854775807)]))\n            elif tipo_campo in [\'cantidad decimal\']:  fields.append(Field(nombre,\'string\',requires=[IS_NOT_EMPTY(),IS_DECIMAL_IN_RANGE(-9223372036854775800, 9223372036854775807, dot=".",error_message=\'El numero debe ser de la forma X.X, donde X esta entre -9223372036854775800 y 9223372036854775807\')]))\n        else:\n            if tipo_campo in   [\'fecha\']:             fields.append(Field(nombre,\'date\',requires=IS_EMPTY_OR(IS_DATE(format=T(\'%Y-%m-%d\'),error_message=\'Fecha invalida, debe ser: AAA-MM-DD\'))))\n            elif tipo_campo in [\'participante,texto\']:fields.append(Field(nombre,\'string\'))\n            elif tipo_campo in [\'ci\']:                fields.append(Field(nombre,\'string\',requires=IS_EMPTY_OR(IS_MATCH(\'\\d{2}.\\d{3}.\\d{3}$\',error_message=\'CI invalida, debe ser: XX.XXX.XXX\'))))\n            elif tipo_campo in [\'comunidad\']:         fields.append(Field(nombre,\'string\'))\n            elif tipo_campo in [\'documento\']:         fields.append(Field(nombre,\'upload\',requires=IS_EMPTY_OR(IS_UPLOAD_FILENAME()),uploadfolder=URL(\'static/archivos\')))\n            elif tipo_campo in [\'telefono\']:          fields.append(Field(nombre,\'string\',requires=IS_EMPTY_OR(IS_MATCH(\'\\(0\\d{3}\\)\\d{3}-\\d{2}-\\d{2}$\', error_message=\'Telefeno invalido, debe ser: (0xxx)xxx-xx-xx\'))))\n            elif tipo_campo in [\'cantidad entera\']:   fields.append(Field(nombre,\'string\',requires=IS_EMPTY_OR(IS_INT_IN_RANGE(-9000000000000000000, 9000000000000000000,error_message=\'Numero muy grande o muy pequeno\'))))\n            elif tipo_campo in [\'cantidad decimal\']:  fields.append(Field(nombre,\'string\',requires=IS_EMPTY_OR(IS_DECIMAL_IN_RANGE(-9000000000000000000, 9000000000000000000, dot=".",error_message=\'El numero debe ser de la forma X.X, donde X esta entre -+9000000000000000000\'))))\n\n\n        valores.append([nombre,row.valor_campo])\n\n    form=SQLFORM.factory(*fields)\n\n    for i in range(len(valores)):\n        setattr(form.vars, valores[i][0], valores[i][1])\n\n    if form.process().accepted:\n\n        for var in form.vars:\n            campo = var.replace("_"," ")\n            id_cam = db(db.CAMPO.nombre==campo).select().first().id_campo\n            valor = getattr(form.vars ,var)\n\n            sql = "UPDATE TIENE_CAMPO SET valor_campo = \'" + str(valor)\n            sql = sql + "\' WHERE id_actividad = \'" + str(id_act) + "\' AND id_campo = \'" + str(id_cam) + "\';"\n            db.executesql(sql)\n\n            update_act = "UPDATE ACTIVIDAD SET ci_usuario_modifica = \'" + str(session.usuario[\'cedula\'])\n            update_act = update_act + "\' WHERE id_actividad = \'" + str(id_act) + "\';"\n            db.executesql(update_act)\n\n        redirect(URL(\'gestionar\'))\n\n    return locals()\n\n\ndef eliminar():\n    id_act = int(request.args(0))\n\n    set_tiene_campo = db(db.TIENE_CAMPO.id_actividad == id_act)\n    set_tiene_campo.delete()\n    actividad = db(db.ACTIVIDAD.id_actividad == id_act)\n    actividad.delete()\n\n    redirect(URL(\'gestionar\'))\n\n    #return "Actividad {} eliminada".format(actividad)\n    return locals()\n\nresponse._vars=response._caller(agregar)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/edward/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/edward/web2py/applications/SiraDex/controllers/actividad.py", line 191, in <module>\n  File "/home/edward/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/edward/web2py/applications/SiraDex/controllers/actividad.py", line 95, in agregar\n    dicc_act = db.ACTIVIDAD.insert(id_tipo = tipo,ci_usuario_crea= session.usuario[\'cedula\'])\n  File "/home/edward/web2py/gluon/packages/dal/pydal/objects.py", line 726, in insert\n    ret = self._db._adapter.insert(self, self._listify(fields))\n  File "/home/edward/web2py/gluon/packages/dal/pydal/adapters/base.py", line 746, in insert\n    raise e\nProgrammingError: (\'ERROR\', \'23503\', \'inserci\\xc3\\xb3n o actualizaci\\xc3\\xb3n en la tabla \\xc2\\xabactividad\\xc2\\xbb viola la llave for\\xc3\\xa1nea \\xc2\\xabfk_actividad_ci_usuario_crea\\xc2\\xbb\')\n'
p11
s.