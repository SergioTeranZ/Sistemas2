(dp1
S'output'
p2
S"<class 'psycopg2.ProgrammingError'> column tipo_actividad.programa does not exist\nLINE 1: SELECT  TIPO_ACTIVIDAD.programa FROM TIPO_ACTIVIDAD WHERE ((...\n                ^\n"
p3
sS'layer'
p4
S'/home/francisco/web2py/applications/SiraDex/controllers/tipo_actividad.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\'\'\' \'\'\'\n\'\'\'\nVista de Gestionar Tipo Actividad, tiene las opciones:\n- Agregar Tipo\n- Eliminar Tipo\n- Papelera (No funcional)\n\'\'\'\ndef gestionar():\n    # Obtengo datos de los tipo_actividades en base de datos para generar\n    # tabla que los muestre\n    query = reduce(lambda a, b: (a&b),[db.TIPO_ACTIVIDAD.id_tipo != None, db.TIPO_ACTIVIDAD.papelera == False])\n   \n    ids = db(query).select(db.TIPO_ACTIVIDAD.id_tipo)\n    nombres = db(query).select(db.TIPO_ACTIVIDAD.nombre)\n    descripcion = db(query).select(db.TIPO_ACTIVIDAD.descripcion)\n    programas = db(query).select(db.TIPO_ACTIVIDAD.programa)\n\n    tipos = db(query).select(db.TIPO_ACTIVIDAD.nombre, db.TIPO_ACTIVIDAD.descripcion, db.TIPO_ACTIVIDAD.id_tipo)\n\n    # Decido que mensaje se va a mostrar\n    if(session.message not in [\'Tipo Eliminado\', \'Tipo agregado exitosamente\']):\n        session.message = \'\'\n    \n    return dict(ids=ids,nombres=nombres,descripcion=descripcion, programas = programas, tipos=tipos, admin = get_tipo_usuario())\n\n\'\'\'\nVista con el formulario para agregar un Tipo Actividad\n\'\'\'\ndef agregar_tipo():\n    # Configuro widgets para el formulario de Agregar Tipo Actividad\n    db.TIPO_ACTIVIDAD.nombre.widget = SQLFORM.widgets.string.widget\n    db.TIPO_ACTIVIDAD.descripcion.widget = SQLFORM.widgets.text.widget\n    db.TIPO_ACTIVIDAD.producto.widget = SQLFORM.widgets.text.widget\n    db.TIPO_ACTIVIDAD.nro_campos.widget = SQLFORM.widgets.integer.widget\n    def horizontal_radio(f, v):\n        return SQLFORM.widgets.radio.widget(f, v, cols=2)\n    db.TIPO_ACTIVIDAD.tipo_p_r.widget = horizontal_radio\n\n    # Genero el formulario para el tipo_actividad\n    \'\'\'\n    formulario = SQLFORM(db.TIPO_ACTIVIDAD,\n                         buttons=[\'submit\'],\n                         fields=[\n                                # \'nombre\',\'tipo_p_r\',\'descripcion\',\'programa\',\'producto\'\n                                 \'nombre\',\'tipo_p_r\',\'descripcion\',\'programa\'\n                                ],\n                         labels = {\'tipo_p_r\' : \'Tipo de Producto\', \'descripcion\' : \'Descripci\xc3\xb3n\'},\n                         submit_button=\'Agregar\'\n                        )\n    \'\'\'\n    catalogo = db(db.CATALOGO.nombre == \'Programas\').select(db.CATALOGO.ALL).first()\n    programas2 = []\n    if(catalogo != None):\n        #programas2.append(catalogo.id_catalogo)\n        query = reduce(lambda a, b: (a&b),[db.CATALOGO_TIENE_CAMPO.id_catalogo == catalogo.id_catalogo,\n                                           db.CAMPO_CATALOGO.nombre == \'Nombre\',\n                                           db.CAMPO_CATALOGO.id_campo_cat == db.CATALOGO_TIENE_CAMPO.id_campo_cat,\n                                           db.VALORES_CAMPO_CATALOGO.id_campo_cat == db.CAMPO_CATALOGO.id_campo_cat,\n                                           db.VALORES_CAMPO_CATALOGO.id_catalogo == catalogo.id_catalogo\n                                          ])\n    \n        programas = db(query).select(db.VALORES_CAMPO_CATALOGO.ALL)\n    \n        for i in range(0, len(programas)):\n            programas2.append(programas[i].valor)\n            #programas2.append(programas[i].id_catalogo)\n\n    formulario = SQLFORM.factory(\n                        Field(\'Nombre\', requires=IS_NOT_EMPTY()),\n                        Field(\'Tipo\', requires=IS_IN_SET([\'P\', \'R\']), default=\'P\'),\n                        Field(\'Descripcion\', requires=IS_NOT_EMPTY()),\n                        Field(\'Programa\', requires=IS_IN_SET(programas2)),\n                        submit_button = \'Agregar\',\n                        labels = {\'Descripcion\' : \'Descripci\xc3\xb3n\'},\n                        )\n\n    # Metodos POST\n    # En caso de que los datos del formulario sean aceptados\n    if formulario.accepts(request.vars, session):\n        session.form_nombre = request.vars.Nombre\n        db.TIPO_ACTIVIDAD.insert(nombre = request.vars.Nombre,\n                                 tipo_p_r = request.vars.Tipo,\n                                 descripcion = request.vars.Descripcion,\n                                 programa = request.vars.Programa\n                                 #id_jefe_creador = session.usuario[\'cedula\']\n                                 )\n        redirect(URL(\'agregar_tipo_campos.html\'))\n    # En caso de que el formulario no sea aceptado\n    elif formulario.errors:\n        session.message = \'Error en el formulario\'\n    # Metodo GET\n    else:\n        session.message = \'\'\n        \n    return dict(formulario=formulario, admin = get_tipo_usuario())\n\n\'\'\'\nVista con el formulario para agregar campos al tipo actividad,\ntambien tiene una tabla con los campos que ya han sido agregados\n\'\'\'\ndef agregar_tipo_campos():\n    # Obtengo el nombre del tipo_actividad desde el objeto global \'session\'\n    nombre_tipo = session.form_nombre\n    tipo_campos = [\'fecha\', \'participante\', \'ci\', \'comunidad\', \'telefono\', \'texto\',\'documento\', \'imagen\', \'cantidad entera\', \'cantidad decimal\']\n    # Creo query para realizar busqueda de los campos que ya han sido agregados\n    # a ese tipo actividad\n    query = reduce(lambda a, b: (a&b),[db.TIPO_ACTIVIDAD.nombre == nombre_tipo,\n                                      db.TIPO_ACTIVIDAD.id_tipo == db.ACT_POSEE_CAMPO.id_tipo_act,\n                                      db.ACT_POSEE_CAMPO.id_campo == db.CAMPO.id_campo])\n    # Guardo los resultados de dicho query en \'campos_guardados\'\n    campos_guardados = db(query).select(db.CAMPO.ALL, db.ACT_POSEE_CAMPO.ALL)\n    \n    # Busco los catalogos disponibles\n    catalogos = db().select(db.CATALOGO.nombre, db.CATALOGO.id_catalogo)\n    nombres_catalogos = [\'---\']\n    for i in range(0, len(catalogos)):\n        nombres_catalogos.append(catalogos[i].nombre)\n\n    # Busco el id del tipo_actividad\n    id_tipo = db(db.TIPO_ACTIVIDAD.nombre == nombre_tipo).select(db.TIPO_ACTIVIDAD.id_tipo)[0].id_tipo\n\n    # Genero formulario para los campos\n    form = SQLFORM.factory(\n                    Field(\'Nombre\', requires=IS_NOT_EMPTY()),\n                    Field(\'Tipo\', requires=IS_IN_SET(tipo_campos)),\n                    Field(\'Obligatorio\', widget=SQLFORM.widgets.boolean.widget),\n                    Field(\'Catalogo\', requires=IS_IN_SET(nombres_catalogos), default=\'---\'),\n                    labels = {\'Catalogo\' : \'Cat\xc3\xa1logo\'},\n                    submit_button = \'Agregar\'\n                    )\n    # Metodos POST\n    # En caso de que los datos del formulario sean aceptados\n    if form.accepts(request.vars, session):\n        # Busco el id del catalogo en caso de que haya uno\n        indice = -1\n        for i in range(1, len(nombres_catalogos)):\n            print(nombres_catalogos[i], request.vars.Catalogo)\n            if(nombres_catalogos[i] == request.vars.Catalogo):\n                indice = i\n        \n        # Agrego el campo a la base\n        if request.vars.Obligatorio == None:\n            request.vars.Obligatorio = False\n            \n        if indice == -1:\n            db.CAMPO.insert(nombre = request.vars.Nombre,\n                            obligatorio = request.vars.Obligatorio,\n                            lista = request.vars.Tipo,\n                            despliega_cat = None\n                            )\n        else:\n            db.CAMPO.insert(nombre = request.vars.Nombre,\n                            obligatorio = request.vars.Obligatorio,\n                            lista = request.vars.Tipo,\n                            despliega_cat = catalogos[indice-1].id_catalogo\n                            )\n        # Busco el id del campo(que fue agregado al presionar boton\n        # de submit) y agrego el objeto de tipo ACT_POSEE_CAMPO a la base\n        # (es la relacion entre el campo y el tipo)\n        idd_campo = db(db.CAMPO.nombre == request.vars.Nombre).select(db.CAMPO.id_campo)[0].id_campo\n        db.ACT_POSEE_CAMPO.insert(id_tipo_act = id_tipo, id_campo = idd_campo)\n        # Redirijo a la misma pagina para seguir agregando campos\n        redirect(URL(\'agregar_tipo_campos.html\'))\n    # En caso de que el formulario no sea aceptado\n    elif form.errors:\n        session.message = \'Datos invalidos\'\n    # Metodo GET\n    else:\n        session.message = \'\'\n\n    return dict(form = form, campos = campos_guardados, admin = get_tipo_usuario())\n\n\'\'\'\nMetodo auxiliar usado para agregar el mensaje de exito\nal agregar un tipo actividad, solo guarda el mensaje y redirige a\nla pagina de gestionar\n\'\'\'\ndef agregar_tipo_aux():\n    \n    session.message = \'Tipo agregado exitosamente\'\n    redirect(URL(\'gestionar.html\'))\n\n\'\'\'\nMetodo que aborta la creacion de un tipo_actividad en la vista de\nagregar campos, no solo elimina los campos y las relaciones sino\nque tambien elimina el tipo_actividad (que a este punto ya se\nencuentra en la base)\n\'\'\'\ndef eliminar_campos():\n    # Obtengo el nombre del tipo_actividad\n    nombre_tipo = session.form_nombre\n\n    # Construyo query para obtener la relacion entre los campos y el tipo\n    # actividad que quiero eliminar\n    query = reduce(lambda a, b: (a&b),[db.TIPO_ACTIVIDAD.nombre == nombre_tipo,\n                                      db.TIPO_ACTIVIDAD.id_tipo == db.ACT_POSEE_CAMPO.id_tipo_act,\n                                      db.ACT_POSEE_CAMPO.id_campo == db.CAMPO.id_campo])\n    # Guardo los resultados en \'aux\'\n    aux = db(query).select(db.ACT_POSEE_CAMPO.ALL)\n\n    # Borro las relaciones (en caso de que hayan)\n    if(len(aux) > 0):\n        db(db.ACT_POSEE_CAMPO.id_tipo_act == aux[0].id_tipo_act).delete()\n\n    # Borro los campos asociados a estas relaciones\n    for row in aux:\n        db(db.CAMPO.id_campo == row.id_campo).delete()\n\n    # Borro el tipo actiidad\n    db(db.TIPO_ACTIVIDAD.nombre == nombre_tipo).delete()\n    \n    redirect(URL(\'gestionar.html\'))\n\n\'\'\'\n Funcion que envia un tipo actividad a la papelera\n el tipo es especificado por un parametr de URL\n\'\'\'\ndef enviar_tipo_papelera():\n    id_tipo = int(request.args[0])\n    db(db.TIPO_ACTIVIDAD.id_tipo == id_tipo).update(papelera=True)\n    session.message = \'Tipo Enviado a la Papelera\'\n    redirect(URL(\'gestionar.html\'))\n\n\'\'\'\n Vista de gestion de la papelera\n\'\'\'\ndef gestionar_archivo_historico():\n    aux = db(db.TIPO_ACTIVIDAD.papelera == True).select(db.TIPO_ACTIVIDAD.nombre,\n                                                        db.TIPO_ACTIVIDAD.descripcion,\n                                                        db.TIPO_ACTIVIDAD.id_tipo)\n\n    return dict(tipos_papelera = aux,admin=get_tipo_usuario())\n\n\'\'\'\n Metodo que elimina un tipo actividad de la base de datos\n de manera definitiva\n\'\'\'\ndef eliminar_tipo_papelera():\n    id_tipo = int(request.args[0])\n    query = reduce(lambda a, b: (a & b), [db.TIPO_ACTIVIDAD.papelera == True,\n                                          db.TIPO_ACTIVIDAD.id_tipo == id_tipo,\n                                          db.TIPO_ACTIVIDAD.id_tipo == db.ACT_POSEE_CAMPO.id_tipo_act,\n                                          db.ACT_POSEE_CAMPO.id_campo == db.CAMPO.id_campo]\n                   )\n    # Guardo los reusltados en \'aux\'\n    aux = db(query).select(db.ACT_POSEE_CAMPO.ALL)\n\n    # Borro las relaciones\n    if (len(aux) > 0):\n        db(db.ACT_POSEE_CAMPO.id_tipo_act == aux[0].id_tipo_act).delete()\n\n    # Borro los campos\n    for row in aux:\n        db(db.CAMPO.id_campo == row.id_campo).delete()\n\n    # Borro el tipo_activdad\n    db(db.TIPO_ACTIVIDAD.id_tipo == id_tipo).delete()\n\n    # Guardo mensaje de exito\n    session.message = \'Tipo Eliminado\'\n    redirect(URL(\'gestionar_archivo_historico.html\'))\n\n\n\'\'\'\n Metodo que restaura un tipo actividad de la papelera\n\'\'\'\ndef restaurar_tipo():\n    id_tipo = int(request.args[0])\n    db(db.TIPO_ACTIVIDAD.id_tipo == id_tipo).update(papelera=False)\n    session.message = \'Tipo Restaurado\'\n    redirect(URL(\'gestionar.html\'))\n\ndef ver_tipo_actividad():\n    id_tipo = int(request.args[0])\n\n    query = reduce(lambda a, b: (a & b), [db.TIPO_ACTIVIDAD.id_tipo == id_tipo,\n                                          db.TIPO_ACTIVIDAD.id_tipo == db.ACT_POSEE_CAMPO.id_tipo_act,\n                                          db.ACT_POSEE_CAMPO.id_campo == db.CAMPO.id_campo])\n\n    campos_guardados = db(query).select(db.CAMPO.ALL)\n\n    tipo = db(db.TIPO_ACTIVIDAD.id_tipo == id_tipo).select(db.TIPO_ACTIVIDAD.ALL).first()\n\n    return dict(campos = campos_guardados, tipo = tipo, admin = get_tipo_usuario())\n\ndef ver_tipo_actividad():\n    id_tipo = int(request.args[0])\n\n    query = reduce(lambda a, b: (a & b), [db.TIPO_ACTIVIDAD.id_tipo == id_tipo,\n                                          db.TIPO_ACTIVIDAD.id_tipo == db.ACT_POSEE_CAMPO.id_tipo_act,\n                                          db.ACT_POSEE_CAMPO.id_campo == db.CAMPO.id_campo])\n\n    campos_guardados = db(query).select(db.CAMPO.ALL)\n\n    tipo = db(db.TIPO_ACTIVIDAD.id_tipo == id_tipo).select(db.TIPO_ACTIVIDAD.ALL).first()\n\n    return dict(campos = campos_guardados, tipo = tipo, admin=get_tipo_usuario())\n\ndef eliminar_campo():\n    id_campo = int(request.args[0])\n\n    db(db.ACT_POSEE_CAMPO.id_campo == id_campo).delete()\n    db(db.CAMPO.id_campo == id_campo).delete()\n\n    redirect(URL(\'agregar_tipo_campos.html\'))\n    \ndef modificar_tipo():\n    id_tipo = int(request.args[0])\n\n    tipo = db(db.TIPO_ACTIVIDAD.id_tipo == id_tipo).select(db.TIPO_ACTIVIDAD.ALL).first()\n\n    db.TIPO_ACTIVIDAD.nombre.writable = False\n    db.TIPO_ACTIVIDAD.programa.writable = False\n\n    form = SQLFORM.factory(db.TIPO_ACTIVIDAD, record=tipo,\n                   fields = [\'nombre\', \'tipo_p_r\', \'descripcion\', \'programa\'],\n                   labels={\'tipo_p_r\': \'Tipo de Producto\',\'descripcion\':\'Descripci\xc3\xb3n\'},\n                   submit_button=\'Relizar Cambios\'\n                   )\n\n    db.TIPO_ACTIVIDAD.nombre.writable = True\n    db.TIPO_ACTIVIDAD.programa.writable = True\n\n    # Metodos POST\n    # En caso de que los datos del formulario sean aceptados\n    if form.accepts(request.vars, session):\n        db(db.TIPO_ACTIVIDAD.id_tipo == id_tipo).update(descripcion = request.vars.descripcion,\n                                                        producto = request.vars.producto)\n        redirect(URL(\'ver_tipo_actividad.html\', args=[id_tipo]))\n\n    # En caso de que el formulario no sea aceptado\n    elif form.errors:\n        session.message = \'Error en el formulario\'\n    # Metodo GET\n    else:\n        session.message = \'\'\n\n    return dict(tipo=tipo, form=form, admin=get_tipo_usuario())\n\ndef get_tipo_usuario():\n    if session.usuario != None:\n        if session.usuario["tipo"] == "DEX" or session.usuario["tipo"] == "Administrador":\n            if(session.usuario["tipo"] == "DEX"):\n                admin = 2\n            elif(session.usuario["tipo"] == "Administrador"):\n                admin = 1\n            else:\n                admin = 0\n        else:\n            redirect(URL(c ="default",f="vMenuPrincipal"))\n    else:\n        redirect(URL(c ="default",f="index"))\n        \n    return admin\n\nresponse._vars=response._caller(gestionar)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/francisco/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/francisco/web2py/applications/SiraDex/controllers/tipo_actividad.py", line 357, in <module>\n  File "/home/francisco/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/francisco/web2py/applications/SiraDex/controllers/tipo_actividad.py", line 17, in gestionar\n    programas = db(query).select(db.TIPO_ACTIVIDAD.programa)\n  File "/home/francisco/web2py/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/home/francisco/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1296, in select\n    return self._select_aux(sql,fields,attributes)\n  File "/home/francisco/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1253, in _select_aux\n    self.execute(sql)\n  File "/home/francisco/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 362, in execute\n    return BaseAdapter.execute(self, *a, **b)\n  File "/home/francisco/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1388, in execute\n    return self.log_execute(*a, **b)\n  File "/home/francisco/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1382, in log_execute\n    ret = self.get_cursor().execute(command, *a[1:], **b)\nProgrammingError: column tipo_actividad.programa does not exist\nLINE 1: SELECT  TIPO_ACTIVIDAD.programa FROM TIPO_ACTIVIDAD WHERE ((...\n                ^\n\n'
p11
s.