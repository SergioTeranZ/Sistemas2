(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> update() takes exactly 1 argument (2 given)"
p3
sS'layer'
p4
S'/home/edward/web2py/applications/SiraDex/controllers/programas.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\nfrom funciones_siradex import get_tipo_usuario\n\n\'\'\'\nVista de Gestionar Programas tiene las opciones:\n- Agregar Programa\n- Editar  Programa\n- Por ahora, no se pueden eliminar programas.\n\'\'\'\n\ndef agregar_programa():\n\n    admin = get_tipo_usuario\n    formulario = SQLFORM.factory(\n                        Field(\'Nombre\',\n                              requires = [IS_NOT_EMPTY(error_message=\'El nombre del programa no puede quedar vacio.\'),\n                                          IS_MATCH(\'([A-Za-z])([A-Za-z0-9" "])*\', error_message="El nombre del programa no puede iniciar con numeros.")]),\n                        Field(\'Descripcion\', type="text",\n                              requires=IS_NOT_EMPTY(error_message=\'La descripcion del programa no puede quedar vacia.\')),\n                        submit_button = \'Agregar\',\n                        labels = {\'Descripcion\' : \'Descripci\xc3\xb3n\',\n                                  \'Nombre\' : \'Nombre del Programa\'},\n                        )\n\n    # Metodos POST\n    # En caso de que los datos del formulario sean aceptados\n    if formulario.accepts(request.vars, session):\n        session.form_nombre = request.vars.Nombre\n        db.PROGRAMA.insert(nombre = request.vars.Nombre,\n                           descripcion = request.vars.Descripcion\n                           )\n        redirect(URL(\'gestionar_programas.html\'))\n    # En caso de que el formulario no sea aceptado\n    elif formulario.errors:\n        session.message = \'Error en los datos del formulario, por favor intente nuevamente.\'\n    # Metodo GET\n    else:\n        session.message = \'\'\n\n    return dict(formulario=formulario, admin = admin)\n\n\n# Permitiria Modificar o Desactivar Programas\n# del sistema Siradex.\ndef gestionar_programas():\n\n\n    admin = get_tipo_usuario()\n\n    # Seleccionamos todos los programas.\n    programas = db().select(db.PROGRAMA.ALL)\n\n    return dict(programas=programas, admin = admin)\n\n\ndef editar_programa():\n\n    admin = get_tipo_usuario()\n    id = request.args[0]\n\n    programa = db(db.PROGRAMA.id_programa == id).select()[0]\n\n    formulario = SQLFORM.factory(\n                        Field(\'Nombre\',\n                              default = programa.nombre,\n                              requires = [IS_NOT_EMPTY(error_message=\'El nombre del programa no puede quedar vacio.\'),\n                                          IS_MATCH(\'([A-Za-z])([A-Za-z0-9" "])*\', error_message="El nombre del programa no puede iniciar con numeros.")]),\n                        Field(\'Descripcion\', type="text",\n                              default = programa.descripcion,\n                              requires=IS_NOT_EMPTY(error_message=\'La descripcion del programa no puede quedar vacia.\')),\n                        submit_button = \'Actualizar\',\n                        labels = {\'Descripcion\' : \'Descripci\xc3\xb3n\',\n                                  \'Nombre\' : \'Nombre del Programa\'},\n                        )\n\n    if formulario.accepts(request.vars, session):\n        session.form_nombre = request.vars.Nombre\n        programa.nombre = request.vars.Nombre\n        programa.descripcion = request.vars.Descripcion\n        db(db.PROGRAMA.id_programa == id).update(programa)\n        redirect(URL(\'gestionar_programas.html\'))\n    # En caso de que el formulario no sea aceptado\n    elif formulario.errors:\n        session.message = \'Error en los datos del formulario, por favor intente nuevamente.\'\n    # Metodo GET\n    else:\n        session.message = \'\'\n\n    return dict(formulario=formulario, admin = admin)\n\n    return dict(formulario=formulario, admin = admin)\n\nresponse._vars=response._caller(editar_programa)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/edward/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/edward/web2py/applications/SiraDex/controllers/programas.py", line 93, in <module>\n  File "/home/edward/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/edward/web2py/applications/SiraDex/controllers/programas.py", line 80, in editar_programa\n    db(db.PROGRAMA.id_programa == id).update(programa)\nTypeError: update() takes exactly 1 argument (2 given)\n'
p11
s.