(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'cedula'"
p3
sS'layer'
p4
S'/home/edward/web2py/applications/SiraDex/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\nimport os\nimport re\nfrom usbutils import get_ldap_data, random_key\nimport urllib2\n### required - do no delete\ndef user(): return dict(form=auth())\ndef download(): return response.download(request,db)\ndef call(): return service()\n### end requires\n\n## URLS DE RETORNO PARA EL CAS ##\n## Solo descomentar segun sea el caso.\n## PARA EL SERVIDOR:\n# URL_RETORNO = "http%3A%2F%2F159.90.211.179%2FSiraDex%2Fdefault%2Flogin_cas"\n## PARA DESSARROLLO. Cambiar el puerto 8000 si es necesario.\nURL_RETORNO = "http%3A%2F%2Flocalhost%3A8000%2FSiraDex%2Fdefault%2Flogin_cas"\n\n########################################################################################################\n############################################# FUNCIONES USUARIO ########################################\n########################################################################################################\ndef get_tipo_usuario():\n    if session.usuario != None:\n        if session.usuario["tipo"] == "Bloqueado":\n            redirect(URL(c = "default",f="index"))\n        if session.usuario["tipo"] == "Administrador":\n            if(session.usuario["tipo"] == "DEX"):\n                admin = 2\n            elif(session.usuario["tipo"] == "Administrador"):\n                admin = 1\n            elif(session.usuario["tipo"] == "Bloqueado"):\n                admin = -1\n            else:\n                admin = 0\n        else:\n            redirect(URL(c ="default",f="vMenuPrincipal"))\n    else:\n        redirect(URL(c ="default",f="index"))\n\n# def login_cas():\n#     if not request.vars.getfirst(\'ticket\'):\n#         #redirect(URL(\'error\'))\n#         pass\n#     try:\n#         import urllib2, ssl\n#         ssl._create_default_https_context = ssl._create_unverified_context\n#         url = "https://secure.dst.usb.ve/validate?ticket="+\\\n#               request.vars.getfirst(\'ticket\') +\\\n#               "&service=" + URL_RETORNO\n#         req = urllib2.Request(url)\n#         response = urllib2.urlopen(req)\n#         the_page = response.read()\n#\n#     except Exception, e:\n#         print "Exception: "\n#         print e\n#         # redirect(URL(\'error\'))\n#\n#     if the_page[0:2] == "no":\n#         pass\n#     else:\n#         # session.casticket = request.vars.getfirst(\'ticket\')\n#         data  = the_page.split()\n#         usbid = data[1]\n#\n#         usuario = get_ldap_data(usbid) #Se leen los datos del CAS\n#         tablaUsuarios = db.USUARIO\n#\n#         session.usuario = usuario\n#         print "Hola",session.usuario\n#         session.usuario[\'usbid\'] = usbid\n#\n#         if not db(tablaUsuarios.usbid == usbid).isempty():\n#             datosUsuario = db(tablaUsuarios.usbid==usbid).select()[0]\n#             session.usuario[\'tipo\'] = datosUsuario.tipo\n#             redirect(URL(\'vMenuPrincipal\'))\n#         else:\n#             session.usuario[\'tipo\'] = "Administrador"\n#             db.USUARIO.insert(ci=session.usuario["cedula"],  # Lo insertamos en la base de datos.\n#             usbid=session.usuario["usbid"],\n#             nombres=session.usuario["first_name"],\n#             apellidos=session.usuario["last_name"],\n#             correo_inst=session.usuario["email"],\n#             tipo = "Administrador")\n#             redirect(URL(\'vRegistroUsuario\'))\n\ndef login_cas():\n\n    session.usuario = dict()\n    session.usuario[\'usbid\'] = "00-00000"\n    session.usuario[\'tipo\']  = "Administrador"\n    session.usuario[\'first_name\'] = "Usuario"\n    session.usuario[\'last_name\']  = "Parche"\n    session.usuario[\'email\']  = "usuario@email.com"\n    redirect(URL(\'vMenuPrincipal\'))\n    \ndef logout_cas():\n    session.usuario = None\n    return response.render()\n\n#Funcion del inicio\ndef index():\n    datosComp = ["","","","","","","",""]\n    return response.render()\n\n# Controlador para el registro del usuario\ndef vRegistroUsuario():\n    if session.usuario != None:\n        # Se usa un formulario que muestre los datos no modificables.\n        form = SQLFORM.factory(\n            Field("USBID", default=session.usuario["usbid"],writable = False),\n            Field(\'Nombres\',default=session.usuario["first_name"],writable = False),\n            Field(\'Apellidos\', default=session.usuario["last_name"],writable=False),\n            readonly=True)\n\n        #Realiza las modificaciones sobre la base de datos en funcion de lo que introduzca el usuario.\n        usuarios = db(db.USUARIO).select()\n        for raw in usuarios:\n            if raw.ci == session.usuario["cedula"]:\n                print("SE metio")\n                forma=SQLFORM(\n                    db.USUARIO,\n                    raw,\n                    button=[\'Registrarse\'],\n                    fields=[\'telefono\',\'correo_alter\'],\n                    submit_button=\'Registrarse\',\n                    labels={\'telefono\':\'Tel\xc3\xa9fono\', \'correo_alter\':\'Correo alternativo\'})\n                break\n        if len(request.vars)!=0:\n            nuevoTelefono = request.vars.telefono\n            nuevoCorreoAlter = request.vars.correo_alter\n            db(db.USUARIO.ci == session.usuario["cedula"]).update(telefono=nuevoTelefono, correo_alter=nuevoCorreoAlter)\n            redirect(URL(\'vMenuPrincipal\'))        # Redirige al usuario al menu principal.\n        return dict(form1 = form, form = forma, admin=get_tipo_usuario())\n    else:\n        redirect(URL("index"))\n\ndef vVerPerfil():\n    if session.usuario != None:\n\tif session.usuario["tipo"] == "Bloqueado":\n\t    redirect(URL("index"))\n        admin = 4\n        if(session.usuario["tipo"] == "DEX"):\n            admin = 2\n        elif(session.usuario["tipo"] == "Administrador"):\n            admin = 1\n        else:\n            admin = 0\n        tlf = None\n        correo_a = None\n        correo_i = None\n        usuarios = db(db.USUARIO).select()\n        for raw in usuarios:\n            if raw.ci == session.usuario["cedula"]:\n                tlf = raw.telefono\n                correo_a = raw.correo_alter\n                correo_i = raw.correo_inst\n        form = SQLFORM.factory(\n            Field("USBID", default=session.usuario["usbid"],writable = False),\n            Field(\'Nombres\',default=session.usuario["first_name"],writable = False),\n            Field(\'Apellidos\', default=session.usuario["last_name"],writable=False),\n            Field(\'Correo_Institucional\', default=correo_i,writable=False),\n            Field(\'Telefono\',label = "Tel\xc3\xa9fono", default=tlf,writable=False),\n            Field(\'Correo_Alternativo\', default=correo_a,writable=False),\n            readonly=True)\n        return dict(form1 = form,admin = admin)\n    else:\n        redirect(URL("index"))\n\ndef vMenuPrincipal():\n    if session.usuario != None:\n        admin = 4\n        if(session.usuario["tipo"] == "DEX"):\n            admin = 2\n        elif(session.usuario["tipo"] == "Administrador"):\n            admin = 1\n        else:\n            admin = 0\n        return dict(admin = admin)\n    else:\n        redirect(URL("index"))\n\ndef vMenuDex():\n    if session.usuario != None:\n        if session.usuario["tipo"] == "Bloqueado":\n            redirect(URL("index"))\n        if session.usuario["tipo"] == "DEX" or session.usuario["tipo"] == "Administrador":\n            admin = 4\n            if(session.usuario["tipo"] == "DEX"):\n                admin = 2\n            elif(session.usuario["tipo"] == "Administrador"):\n                admin = 1\n            else:\n                admin = 0\n            return dict(admin = admin)\n        else:\n            redirect(URL("vMenuPrincipal"))\n    else:\n        redirect(URL("index"))\n\ndef vEditarPerfil():\n    if session.usuario != None:\n        if session.usuario["tipo"] == "Bloqueado":\n            redirect(URL("index"))\n        if(session.usuario["tipo"] == "DEX"):\n            admin = 2\n        elif(session.usuario["tipo"] == "Administrador"):\n            admin = 1\n        else:\n            admin = 0\n        form = SQLFORM.factory(\n            Field("USBID", default=session.usuario["usbid"],writable = False),\n            Field(\'Nombres\',default=session.usuario["first_name"],writable = False),\n            Field(\'Apellidos\', default=session.usuario["last_name"],writable=False),\n            readonly=True)\n        usuarios = db(db.USUARIO).select()\n        # Modificar datos del perfil.\n        for raw in usuarios:\n            if raw.ci == session.usuario["cedula"]:\n                forma=SQLFORM(\n                    db.USUARIO,\n                    record=raw,\n                    button=[\'Actualizar\'],\n                    fields=[\'telefono\',\'correo_alter\'],\n                    submit_button=\'Actualizar\',\n                    labels={\'telefono\':\'Tel\xc3\xa9fono\', \'correo_alter\':\'Correo alternativo\'})\n        if len(request.vars)!=0:\n            nuevoTelefono = request.vars.telefono\n            nuevoCorreoAlter = request.vars.correo_alter\n            db(db.USUARIO.ci == session.usuario["cedula"]).update(telefono=nuevoTelefono, correo_alter=nuevoCorreoAlter)\n            redirect(URL(\'vVerPerfil\'))\n\n        return dict(form1 = form, form = forma, admin = admin)\n    else:\n        redirect(URL("index"))\n\n##########################################################################################################\n###################################  FUNCIONES GESTIONAR USUARIO  ########################################\n##########################################################################################################\n\ndef vMenuAdmin():\n    if session.usuario != None:\n        if session.usuario["tipo"] == "Bloqueado":\n            redirect(URL("index"))\n        if session.usuario["tipo"] == "Administrador":\n            session.message = ""\n            return response.render(admin = get_tipo_usuario())\n        else:\n            redirect(URL("vMenuPrincipal"))\n    else:\n        redirect(URL("index"))\n\ndef vGestionarUsuarios():\n    if session.usuario != None:\n        if session.usuario["tipo"] == "Bloqueado":\n            redirect(URL("index"))\n        if session.usuario["tipo"] == "Administrador":\n            message = session.message\n            session.message = ""\n            aux = db(db.USUARIO).select(db.USUARIO.usbid,db.USUARIO.nombres,db.USUARIO.apellidos,db.USUARIO.tipo)\n            return dict(usuarios = aux,message = message, admin=get_tipo_usuario())\n        else:\n            redirect(URL("vMenuPrincipal"))\n    else:\n        redirect(URL("index"))\n\ndef vAgregarUsuario():\n    if session.usuario != None:\n        if session.usuario["tipo"] == "Bloqueado":\n            redirect(URL("index"))\n        if session.usuario["tipo"] == "Administrador":\n            message = ""\n            datosCompAux = ["","","","","","","",""]    # En esta lista guardaremos todos los datos que seran extraidos del LDAP para crear el nuevo usuario\n            forma=SQLFORM(                              # Se hace un formulario para introducir un USBID.\n                db.USUARIO,\n                button=[\'Agregar\'],\n                fields=[\'usbid\',\'tipo\',\'telefono\',\'correo_alter\'],\n                submit_button=\'Agregar\',\n                labels={\'usbid\':\'USBID\',\'telefono\':\'Tel\xc3\xa9fono\', \'correo_alter\':\'Correo alternativo\',\'tipo\':\'Tipo\'})\n            # Si el largo de request.vars es mayor a cero, quiere decir que de introdujo informacion en el formulario.\n            if len(request.vars)!=0:\n                # En usbidAux almacenamos el usbid proporcionado por el administrador\n                # En imprimir1 almacenamos la informacion del LDAP con grep\n                usbidAux = request.vars.usbid\n                user = get_ldap_data(usbidAux)\n                telefonoAux = request.vars.telefono\n                correo_alterAux = request.vars.correo_alter\n                tipoAux = request.vars.tipo\n                if(len(tipoAux) < 3):\n                    message = T("Debe Especificar un Tipo")\n                    redirect(URL("vAgregarUsuario"))\n                imprimir1 = os.popen("ldapsearch -x -h ldap.usb.ve -b \\"dc=usb,dc=ve\\" uid="+ usbidAux +" | grep \'^givenName\\|^personalId\\|^sn\\|^uid:\\|^mail\\|^studentId\\|^career\\|^gidNumber\'")\n\n                # Recorremos cada linea del archivo para realizar las asignaciones correspondientes de acuerdo a la informacion proporcionada por el LDAP\n                for line in imprimir1.readlines():\n                    line = line.split(\':\')        # Separamos los campos por los dos puntos.\n                    if line[0] == "uid":          # Primera Posicion: Carnet con guion.\n                        datosCompAux[0] = line[1]\n                    elif line[0] == "givenName":  # Segunda Posicion: Nombre(s) del usuario.\n                        datosCompAux[1] = line[1]\n                    elif line[0] == "sn":         # Tercera Posicion: Apellido(s) del usuario.\n                        datosCompAux[2] = line[1]\n                    elif line[0] == "personalId": # Cuarta Posicion: Cedula de identidad del usuario.\n                        datosCompAux[3] = line[1]\n                    elif line[0] == "gidNumber":  # Quinta Posicion: Rol del usuario (Profesor, estudiante, etc.).\n                        datosCompAux[4] = line[1]\n                    elif line[0] == "mail":       # Sexta Posicion: Email del usuario.\n                        datosCompAux[5] = line[1]\n                    elif line[0] == "career":     # Septima posicion: Carrera del usuario.\n                        datosCompAux[6] = line[1]\n                    elif line[0] == "studentId":  # Octava posicion: Carnet sin guion.\n                        datosCompAux[7] = line[1]\n\n                # Si datosCompAux esta vacio, quiere decir que no se el carnet no esta en LDAP\n                print(datosCompAux)\n                if datosCompAux[0]=="":\n                    message = T("El usuario no se encuentra asociado al CAS")\n                    #return dict(message = response.flash)\n                # En caso contrario, el usuario debe ser agregado a la base de datos de la universidad.\n                else:\n                    # Primero verificamos que el usuario que intenta agregarse no esta en la base de datos\n                    if db(db.USUARIO.usbid == usbidAux).isempty():\n                        # Lo insertamos en la base de datos.\n                        db.USUARIO.insert(ci=user["cedula"],\n                                usbid=usbidAux,\n                                nombres=datosCompAux[1],\n                                apellidos=datosCompAux[2],\n                                correo_inst=user["email"],\n                                telefono = telefonoAux,\n                                correo_alter = correo_alterAux,\n                                tipo = tipoAux)\n\n                        # Luego de insertar al usuario, mostramos un formulario al administrador con los datos de la persona agregada\n                        form = SQLFORM.factory(\n                            Field("USBID", default=datosCompAux[0],writable = False),\n                            Field(\'Nombres\',default=datosCompAux[1],writable = False),\n                            Field(\'apellidos\', default=datosCompAux[2],writable=False),\n                            readonly=True)\n                        return dict(form = form, message = message, bool = 1, admin=get_tipo_usuario())\n                    else:\n                        message= T("El usuario ya esta registrado")\n                        #return dict(message = response.flash)\n            return dict(form = forma,message = message, admin=get_tipo_usuario())\n        else:\n            redirect(URL("vMenuPrincipal"))\n    else:\n        redirect(URL("index"))\n\ndef vEliminarUsuario():\n    if session.usuario != None:\n        if session.usuario["tipo"] == "Bloqueado":\n            redirect(URL("index"))\n        if session.usuario["tipo"] == "Administrador":\n            if len(request.args)!=0 :\n                if request.args[0] != session.usuario["usbid"]:\n                    session.message = ""\n                    if (not db(db.USUARIO.usbid == request.args[0]).isempty()):\n                        db(db.USUARIO.usbid == request.args[0]).delete()\n                        redirect(URL(\'vGestionarUsuarios\'))\n                else:\n                    session.message = T("Para eliminar su cuenta, por favor comun\xc3\xadquese con un administrador")\n                    redirect(URL(\'vGestionarUsuarios\'))\n        else:\n            redirect(URL("vMenuPrincipal"))\n    else:\n        redirect(URL("index"))\n\ndef vModificarRol():\n    if session.usuario != None:\n        if session.usuario["tipo"] == "Bloqueado":\n            redirect(URL("index"))\n        if session.usuario["tipo"] == "Administrador":\n            message= ""\n            form = SQLFORM.factory(\n                            Field("USBID", default=request.args[0],writable = False),\n                            readonly=True)\n            forma=SQLFORM(\n                    db.USUARIO,\n                    button=[\'Actualizar\'],\n                    fields=[\'tipo\'],\n                    submit_button=\'Actualizar\',\n                    labels={\'tipo\':\'TIPO\'})\n            if len(request.vars)!=0:\n                if (not db(db.USUARIO.usbid == request.args[0]).isempty()):\n                    if(request.args[0] != session.usuario["usbid"]):\n                        db(db.USUARIO.usbid == request.args[0]).update(tipo = request.vars.tipo)\n                        redirect(URL(\'vGestionarUsuarios\'))\n                    else:\n                        message = T("Para cambiar sus permisos, por favor comun\xc3\xadquese con un administrador")\n                else:\n                    message = T("El Usuario no se encuentra registrado")\n\n            return dict(forma = form, form = forma, message = message, admin=get_tipo_usuario())\n        else:\n            redirect(URL("vMenuPrincipal"))\n    else:\n        redirect(URL("index"))\n\ndef setVista():\n    session.vista = int(request.args[0])\n\n    if session.vista == 0:\n        redirect(URL(c=\'actividad\', f=\'gestionar.html\'))\n    elif session.vista == 1:\n        redirect(URL(c=\'tipo_actividad\', f=\'gestionar.html\'))\n    elif session.vista == 2:\n        redirect(URL(c=\'default\', f=\'vGestionarUsuarios.html\'))\n    else:\n        print(\'NO JUEGUES CON MI SISTEMA\')\n\n    return dict(admin = get_tipo_usuario())\n\ndef get_tipo_usuario():\n    if session.usuario != None:\n        if session.usuario["tipo"] == "DEX" or session.usuario["tipo"] == "Administrador":\n            if(session.usuario["tipo"] == "DEX"):\n                admin = 2\n            elif(session.usuario["tipo"] == "Administrador"):\n                admin = 1\n            else:\n                admin = 0\n        else:\n            redirect(URL(c ="default",f="vMenuPrincipal"))\n    else:\n        redirect(URL(c ="default",f="index"))\n\n    return admin\n\ndef cambiar_colores():\n\n    session.template = int(request.vars[\'color\'])\n    print(session.template)\n    if request.env.http_referer:\n        redirect(request.env.http_referer)\n\n    return dict()\n\nresponse._vars=response._caller(vVerPerfil)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/edward/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/edward/web2py/applications/SiraDex/controllers/default.py", line 446, in <module>\n  File "/home/edward/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/edward/web2py/applications/SiraDex/controllers/default.py", line 162, in vVerPerfil\n    if raw.ci == session.usuario["cedula"]:\nKeyError: \'cedula\'\n'
p11
s.